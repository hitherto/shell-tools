#!/usr/bin/perl

################################################################################
#
# fbtest - a script for managing test users against Facebook application
#               accounts
#
# Usage:
#
# fbtest [env] [command] [options]
# 
# [env] :
#
# You can set the script up to use multiple keys for different envs; eg, if you
# have a key for your dev environment, and one for your production environment
#
#
# [command] :
#
# create [count] - create [count] new test users (defaults to 1)
# list           - list existing test users
# login [id]     - (on os x) opens the current login URL for that user in the browser (make sure you logged out of FB first)
# delete [id]    - delete the test user with id [id]
# delete all     - delete all users for this env
# friends        - make all the test users on this account friends with each other
# view           - (on os x) opens a dump of current users in the browser

#
#
# Requires the cpan JSON module...
#
# sudo cpan
# install JSON
#
# Also (currently) relies on having command-line curl installed
#

use strict;

use JSON;

################################################################################
#
# Config!
#

#
# environments and keys
#

my %keymap = (
	'prod'	=> {'id' => '[app id here]', 'secret' => '[app secret here]'},
	'dev'	=> {'id' => '[app id here]',  'secret' => '[app secret here]'},
);

#
# things we can do
#

my @commands = qw(create delete friends list login view);

#
# empty vars we'll populate shortly
#

my (%key, $command);

################################################################################
#
# check args
#
if ($ARGV[0] && $keymap{$ARGV[0]}){
	%key = %{$keymap{$ARGV[0]}};
} else {
	print "Which environment did you want to use?\n\nChoices are: ".join(', ',keys(%keymap))."\n";
	exit;
}

if ($ARGV[1] && grep(/^$ARGV[1]$/,@commands)){
	$command = $ARGV[1];
} else{
	print "What do you want to do?\n\nChoices are: ".join(', ',@commands)."\n";
	exit;
}

################################################################################
#
# Get access token
#
print "getting access token...";

my $token = `curl -s -F grant_type=client_credentials -F client_id=$key{id} -F client_secret=$key{secret} https://graph.facebook.com/oauth/access_token`;

if (!$token){
	print "Huh. Couldn't get the token. Are your credentials correct?\n\n";
	exit;
} else {
	print " done.\n";
}

################################################################################
#
# Get to work!
#
if ($command eq "list"){
	print "\n".join("\n",get_user_list($token))."\n\n";
} elsif ($command eq "view"){
	`open 'https://graph.facebook.com/$key{id}/accounts/test-users\?$token'`;
} elsif ($command eq "create"){
	my $count = $ARGV[2] ? $ARGV[2] : 1;
	
	for (my $x = 1; $x <= $count; $x++){
		print "Creating user $x...\n";
		print `curl -s --data-urlencode 'installed=true' --data-urlencode '$token' https://graph.facebook.com/$key{id}/accounts/test-users`;
		print "\n\n";
	}
} elsif ($command eq "delete"){
	if ($ARGV[2] eq "all"){
		my @ids = get_user_list($token);
		foreach my $id (@ids){
			print "Deleting user $ARGV[2]...\n";
			print `curl -s -X DELETE 'https://graph.facebook.com/$ARGV[2]?$token'`;
			print "\n";
		}
		
	} elsif ($ARGV[2]){
		print "Deleting user $ARGV[2]...\n";
		print `curl -s -X DELETE 'https://graph.facebook.com/$ARGV[2]?$token'`;
	}
	print "\n\n";
} elsif ($command eq "friends"){
	my %ids = get_user_list($token,'access_token');
	foreach my $id (keys(%ids)){
		foreach my $id2 (keys(%ids)){
			if ($id != $id2){
				print "friending $id to $id2...\n";
				print `curl -s --data-urlencode 'access_token=$ids{$id}' https://graph.facebook.com/$id/friends/$id2`;
				print "\n";
			}
		}
	}
} elsif ($command eq "login"){
	if (!$ARGV[2]){
		print "login who, smarty-pants?\n";
		exit;
	} else {
		my %ids = get_user_list($token,'login_url');
		if (!$ids{$ARGV[2]}){
			print "user not found. blerp.\n";
		} else {
			if ($^O eq 'darwin'){
				`open '$ids{$ARGV[2]}'`;
			} else {
				print "Copy-and-paste this in yer browser:\n$ids{$ARGV[2]}\n";
			}
		}
	}
}

################################################################################
#
# helper routines
#

sub get_user_list {
	my ($token,$data_type) = @_;

	my $data = `curl -s -g 'https://graph.facebook.com/$key{id}/accounts/test-users\?$token'`;

	my $json = new JSON;

	my $json_data = $json->allow_nonref->utf8->relaxed->decode($data);

	if ($data_type){
		my %ids;
		
		foreach my $user(@{$json_data->{data}}){
			$ids{$user->{id}} = $user->{$data_type};
		}
		
		return %ids;
	} else {
		my @ids;

		foreach my $user(@{$json_data->{data}}){
			push(@ids,$user->{id});
		}

		sort(@ids);
		return @ids;
	}
}

